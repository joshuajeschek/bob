//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Console } from './Console';
import { ConsoleFromJSON, ConsoleFromJSONTyped, ConsoleToJSON } from './Console';
import type { Pc } from './Pc';
import { PcFromJSON, PcFromJSONTyped, PcToJSON } from './Pc';

/**
 * Competitive ranking in the last season played by the player in different roles depending on the platform. If the career is private or if the player doesn't play competitive at all, it's null.
 * @export
 * @interface Competitive1
 */
export interface Competitive1 {
	/**
	 *
	 * @type {Pc}
	 * @memberof Competitive1
	 */
	pc?: Pc;
	/**
	 *
	 * @type {Console}
	 * @memberof Competitive1
	 */
	console?: Console;
}

/**
 * Check if a given object implements the Competitive1 interface.
 */
export function instanceOfCompetitive1(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function Competitive1FromJSON(json: any): Competitive1 {
	return Competitive1FromJSONTyped(json, false);
}

export function Competitive1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Competitive1 {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		pc: !exists(json, 'pc') ? undefined : PcFromJSON(json['pc']),
		console: !exists(json, 'console') ? undefined : ConsoleFromJSON(json['console'])
	};
}

export function Competitive1ToJSON(value?: Competitive1 | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		pc: PcToJSON(value.pc),
		console: ConsoleToJSON(value.console)
	};
}
