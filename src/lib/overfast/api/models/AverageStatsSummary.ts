//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface AverageStatsSummary
 */
export interface AverageStatsSummary {
	/**
	 * Average eliminations per 10 minutes
	 * @type {number}
	 * @memberof AverageStatsSummary
	 */
	eliminations: number;
	/**
	 * Average assists per 10 minutes
	 * @type {number}
	 * @memberof AverageStatsSummary
	 */
	assists: number;
	/**
	 * Average deaths per 10 minutes
	 * @type {number}
	 * @memberof AverageStatsSummary
	 */
	deaths: number;
	/**
	 * Average damage done per 10 minutes
	 * @type {number}
	 * @memberof AverageStatsSummary
	 */
	damage: number;
	/**
	 * Average healing done per 10 minutes
	 * @type {number}
	 * @memberof AverageStatsSummary
	 */
	healing: number;
}

/**
 * Check if a given object implements the AverageStatsSummary interface.
 */
export function instanceOfAverageStatsSummary(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && 'eliminations' in value;
	isInstance = isInstance && 'assists' in value;
	isInstance = isInstance && 'deaths' in value;
	isInstance = isInstance && 'damage' in value;
	isInstance = isInstance && 'healing' in value;

	return isInstance;
}

export function AverageStatsSummaryFromJSON(json: any): AverageStatsSummary {
	return AverageStatsSummaryFromJSONTyped(json, false);
}

export function AverageStatsSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): AverageStatsSummary {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		eliminations: json['eliminations'],
		assists: json['assists'],
		deaths: json['deaths'],
		damage: json['damage'],
		healing: json['healing']
	};
}

export function AverageStatsSummaryToJSON(value?: AverageStatsSummary | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		eliminations: value.eliminations,
		assists: value.assists,
		deaths: value.deaths,
		damage: value.damage,
		healing: value.healing
	};
}
