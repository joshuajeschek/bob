//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Competitive } from './Competitive';
import { CompetitiveFromJSON, CompetitiveFromJSONTyped, CompetitiveToJSON } from './Competitive';
import type { Quickplay } from './Quickplay';
import { QuickplayFromJSON, QuickplayFromJSONTyped, QuickplayToJSON } from './Quickplay';

/**
 * Player statistics on PC. If the player doesn't play on this platform, it's null.
 * @export
 * @interface Pc1
 */
export interface Pc1 {
	/**
	 *
	 * @type {Quickplay}
	 * @memberof Pc1
	 */
	quickplay?: Quickplay;
	/**
	 *
	 * @type {Competitive}
	 * @memberof Pc1
	 */
	competitive?: Competitive;
}

/**
 * Check if a given object implements the Pc1 interface.
 */
export function instanceOfPc1(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function Pc1FromJSON(json: any): Pc1 {
	return Pc1FromJSONTyped(json, false);
}

export function Pc1FromJSONTyped(json: any, ignoreDiscriminator: boolean): Pc1 {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		quickplay: !exists(json, 'quickplay') ? undefined : QuickplayFromJSON(json['quickplay']),
		competitive: !exists(json, 'competitive') ? undefined : CompetitiveFromJSON(json['competitive'])
	};
}

export function Pc1ToJSON(value?: Pc1 | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		quickplay: QuickplayToJSON(value.quickplay),
		competitive: CompetitiveToJSON(value.competitive)
	};
}
