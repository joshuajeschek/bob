//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MapGamemode } from './MapGamemode';
import { MapGamemodeFromJSON, MapGamemodeFromJSONTyped, MapGamemodeToJSON } from './MapGamemode';

/**
 *
 * @export
 * @interface ModelMap
 */
export interface ModelMap {
	/**
	 * Name of the map
	 * @type {string}
	 * @memberof ModelMap
	 */
	name: string;
	/**
	 * Screenshot of the map
	 * @type {string}
	 * @memberof ModelMap
	 */
	screenshot: string;
	/**
	 * Main gamemodes on which the map is playable
	 * @type {Array<MapGamemode>}
	 * @memberof ModelMap
	 */
	gamemodes: Array<MapGamemode>;
	/**
	 * Location of the map
	 * @type {string}
	 * @memberof ModelMap
	 */
	location: string;
	/**
	 * Country Code of the location of the map. If not defined, it's null.
	 * @type {string}
	 * @memberof ModelMap
	 */
	countryCode?: string;
}

/**
 * Check if a given object implements the ModelMap interface.
 */
export function instanceOfModelMap(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && 'name' in value;
	isInstance = isInstance && 'screenshot' in value;
	isInstance = isInstance && 'gamemodes' in value;
	isInstance = isInstance && 'location' in value;

	return isInstance;
}

export function ModelMapFromJSON(json: any): ModelMap {
	return ModelMapFromJSONTyped(json, false);
}

export function ModelMapFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelMap {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		name: json['name'],
		screenshot: json['screenshot'],
		gamemodes: (json['gamemodes'] as Array<any>).map(MapGamemodeFromJSON),
		location: json['location'],
		countryCode: !exists(json, 'country_code') ? undefined : json['country_code']
	};
}

export function ModelMapToJSON(value?: ModelMap | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		name: value.name,
		screenshot: value.screenshot,
		gamemodes: (value.gamemodes as Array<any>).map(MapGamemodeToJSON),
		location: value.location,
		country_code: value.countryCode
	};
}
