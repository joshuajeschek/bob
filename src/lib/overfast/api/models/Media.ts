//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MediaType } from './MediaType';
import { MediaTypeFromJSON, MediaTypeFromJSONTyped, MediaTypeToJSON } from './MediaType';

/**
 *
 * @export
 * @interface Media
 */
export interface Media {
	/**
	 *
	 * @type {MediaType}
	 * @memberof Media
	 */
	type: MediaType;
	/**
	 * Link to the media
	 * @type {string}
	 * @memberof Media
	 */
	link: string;
}

/**
 * Check if a given object implements the Media interface.
 */
export function instanceOfMedia(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && 'type' in value;
	isInstance = isInstance && 'link' in value;

	return isInstance;
}

export function MediaFromJSON(json: any): Media {
	return MediaFromJSONTyped(json, false);
}

export function MediaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Media {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		type: MediaTypeFromJSON(json['type']),
		link: json['link']
	};
}

export function MediaToJSON(value?: Media | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		type: MediaTypeToJSON(value.type),
		link: value.link
	};
}
