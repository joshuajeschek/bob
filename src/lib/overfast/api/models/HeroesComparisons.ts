//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CriticalHitAccuracy } from './CriticalHitAccuracy';
import { CriticalHitAccuracyFromJSON, CriticalHitAccuracyFromJSONTyped, CriticalHitAccuracyToJSON } from './CriticalHitAccuracy';
import type { EliminationsPerLife } from './EliminationsPerLife';
import { EliminationsPerLifeFromJSON, EliminationsPerLifeFromJSONTyped, EliminationsPerLifeToJSON } from './EliminationsPerLife';
import type { GamesWon } from './GamesWon';
import { GamesWonFromJSON, GamesWonFromJSONTyped, GamesWonToJSON } from './GamesWon';
import type { MultikillBest } from './MultikillBest';
import { MultikillBestFromJSON, MultikillBestFromJSONTyped, MultikillBestToJSON } from './MultikillBest';
import type { ObjectiveKills } from './ObjectiveKills';
import { ObjectiveKillsFromJSON, ObjectiveKillsFromJSONTyped, ObjectiveKillsToJSON } from './ObjectiveKills';
import type { TimePlayed } from './TimePlayed';
import { TimePlayedFromJSON, TimePlayedFromJSONTyped, TimePlayedToJSON } from './TimePlayed';
import type { WeaponAccuracy } from './WeaponAccuracy';
import { WeaponAccuracyFromJSON, WeaponAccuracyFromJSONTyped, WeaponAccuracyToJSON } from './WeaponAccuracy';
import type { WinPercentage } from './WinPercentage';
import { WinPercentageFromJSON, WinPercentageFromJSONTyped, WinPercentageToJSON } from './WinPercentage';

/**
 * List of general statistics on which heroes are compared for the player : total time played, number of games won, weapon accuracy, number of eliminations per life, etc.). Note that all heroes may not be included in every statistic objects.
 * @export
 * @interface HeroesComparisons
 */
export interface HeroesComparisons {
	/**
	 *
	 * @type {TimePlayed}
	 * @memberof HeroesComparisons
	 */
	timePlayed?: TimePlayed;
	/**
	 *
	 * @type {GamesWon}
	 * @memberof HeroesComparisons
	 */
	gamesWon?: GamesWon;
	/**
	 *
	 * @type {WeaponAccuracy}
	 * @memberof HeroesComparisons
	 */
	weaponAccuracy?: WeaponAccuracy;
	/**
	 *
	 * @type {WinPercentage}
	 * @memberof HeroesComparisons
	 */
	winPercentage?: WinPercentage;
	/**
	 *
	 * @type {EliminationsPerLife}
	 * @memberof HeroesComparisons
	 */
	eliminationsPerLife?: EliminationsPerLife;
	/**
	 *
	 * @type {CriticalHitAccuracy}
	 * @memberof HeroesComparisons
	 */
	criticalHitAccuracy?: CriticalHitAccuracy;
	/**
	 *
	 * @type {MultikillBest}
	 * @memberof HeroesComparisons
	 */
	multikillBest?: MultikillBest;
	/**
	 *
	 * @type {ObjectiveKills}
	 * @memberof HeroesComparisons
	 */
	objectiveKills?: ObjectiveKills;
}

/**
 * Check if a given object implements the HeroesComparisons interface.
 */
export function instanceOfHeroesComparisons(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function HeroesComparisonsFromJSON(json: any): HeroesComparisons {
	return HeroesComparisonsFromJSONTyped(json, false);
}

export function HeroesComparisonsFromJSONTyped(json: any, ignoreDiscriminator: boolean): HeroesComparisons {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		timePlayed: !exists(json, 'time_played') ? undefined : TimePlayedFromJSON(json['time_played']),
		gamesWon: !exists(json, 'games_won') ? undefined : GamesWonFromJSON(json['games_won']),
		weaponAccuracy: !exists(json, 'weapon_accuracy') ? undefined : WeaponAccuracyFromJSON(json['weapon_accuracy']),
		winPercentage: !exists(json, 'win_percentage') ? undefined : WinPercentageFromJSON(json['win_percentage']),
		eliminationsPerLife: !exists(json, 'eliminations_per_life') ? undefined : EliminationsPerLifeFromJSON(json['eliminations_per_life']),
		criticalHitAccuracy: !exists(json, 'critical_hit_accuracy') ? undefined : CriticalHitAccuracyFromJSON(json['critical_hit_accuracy']),
		multikillBest: !exists(json, 'multikill_best') ? undefined : MultikillBestFromJSON(json['multikill_best']),
		objectiveKills: !exists(json, 'objective_kills') ? undefined : ObjectiveKillsFromJSON(json['objective_kills'])
	};
}

export function HeroesComparisonsToJSON(value?: HeroesComparisons | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		time_played: TimePlayedToJSON(value.timePlayed),
		games_won: GamesWonToJSON(value.gamesWon),
		weapon_accuracy: WeaponAccuracyToJSON(value.weaponAccuracy),
		win_percentage: WinPercentageToJSON(value.winPercentage),
		eliminations_per_life: EliminationsPerLifeToJSON(value.eliminationsPerLife),
		critical_hit_accuracy: CriticalHitAccuracyToJSON(value.criticalHitAccuracy),
		multikill_best: MultikillBestToJSON(value.multikillBest),
		objective_kills: ObjectiveKillsToJSON(value.objectiveKills)
	};
}
