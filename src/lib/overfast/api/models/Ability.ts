//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Video } from './Video';
import { VideoFromJSON, VideoFromJSONTyped, VideoToJSON } from './Video';

/**
 *
 * @export
 * @interface Ability
 */
export interface Ability {
	/**
	 * Name of the ability
	 * @type {string}
	 * @memberof Ability
	 */
	name: string;
	/**
	 * Description of the ability
	 * @type {string}
	 * @memberof Ability
	 */
	description: string;
	/**
	 * Icon URL of the ability
	 * @type {string}
	 * @memberof Ability
	 */
	icon: string;
	/**
	 *
	 * @type {Video}
	 * @memberof Ability
	 */
	video: Video;
}

/**
 * Check if a given object implements the Ability interface.
 */
export function instanceOfAbility(value: object): boolean {
	let isInstance = true;
	isInstance = isInstance && 'name' in value;
	isInstance = isInstance && 'description' in value;
	isInstance = isInstance && 'icon' in value;
	isInstance = isInstance && 'video' in value;

	return isInstance;
}

export function AbilityFromJSON(json: any): Ability {
	return AbilityFromJSONTyped(json, false);
}

export function AbilityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ability {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		name: json['name'],
		description: json['description'],
		icon: json['icon'],
		video: VideoFromJSON(json['video'])
	};
}

export function AbilityToJSON(value?: Ability | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		name: value.name,
		description: value.description,
		icon: value.icon,
		video: VideoToJSON(value.video)
	};
}
