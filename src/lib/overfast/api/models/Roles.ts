//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Damage1 } from './Damage1';
import { Damage1FromJSON, Damage1FromJSONTyped, Damage1ToJSON } from './Damage1';
import type { Support1 } from './Support1';
import { Support1FromJSON, Support1FromJSONTyped, Support1ToJSON } from './Support1';
import type { Tank1 } from './Tank1';
import { Tank1FromJSON, Tank1FromJSONTyped, Tank1ToJSON } from './Tank1';

/**
 * Sum of the stats of all the heroes played by the player, regrouped by roles
 * @export
 * @interface Roles
 */
export interface Roles {
	/**
	 *
	 * @type {Tank1}
	 * @memberof Roles
	 */
	tank?: Tank1;
	/**
	 *
	 * @type {Damage1}
	 * @memberof Roles
	 */
	damage?: Damage1;
	/**
	 *
	 * @type {Support1}
	 * @memberof Roles
	 */
	support?: Support1;
}

/**
 * Check if a given object implements the Roles interface.
 */
export function instanceOfRoles(value: object): boolean {
	let isInstance = true;

	return isInstance;
}

export function RolesFromJSON(json: any): Roles {
	return RolesFromJSONTyped(json, false);
}

export function RolesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Roles {
	if (json === undefined || json === null) {
		return json;
	}
	return {
		tank: !exists(json, 'tank') ? undefined : Tank1FromJSON(json['tank']),
		damage: !exists(json, 'damage') ? undefined : Damage1FromJSON(json['damage']),
		support: !exists(json, 'support') ? undefined : Support1FromJSON(json['support'])
	};
}

export function RolesToJSON(value?: Roles | null): any {
	if (value === undefined) {
		return undefined;
	}
	if (value === null) {
		return null;
	}
	return {
		tank: Tank1ToJSON(value.tank),
		damage: Damage1ToJSON(value.damage),
		support: Support1ToJSON(value.support)
	};
}
