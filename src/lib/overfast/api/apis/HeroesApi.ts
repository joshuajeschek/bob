//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * OverFast API
 * OverFast API gives data about Overwatch 2 heroes, gamemodes, maps and players statistics by scraping Blizzard pages. Built with **FastAPI** and **Beautiful Soup**, and uses **nginx** as reverse proxy and **Redis** for caching. By using a Refresh-Ahead cache system, it minimizes calls to Blizzard pages (which can be very slow), and quickly returns accurate data to users.  In players statistics endpoints, several conversions are made for convenience : - all **duration values** are converted into **seconds** (integer) - **percent values** are exposed as **integers** instead of a string with a percent symbol - integer and float string representations are converted into the concerned type  Swagger UI (useful for trying API calls) : https://overfast-api.tekrop.fr/docs
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: vporchet@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	BlizzardErrorMessage,
	HTTPValidationError,
	Hero,
	HeroKey,
	HeroParserErrorMessage,
	HeroShort,
	InternalServerErrorMessage,
	Locale,
	Role,
	RoleDetail
} from '../models';
import {
	BlizzardErrorMessageFromJSON,
	BlizzardErrorMessageToJSON,
	HTTPValidationErrorFromJSON,
	HTTPValidationErrorToJSON,
	HeroFromJSON,
	HeroToJSON,
	HeroKeyFromJSON,
	HeroKeyToJSON,
	HeroParserErrorMessageFromJSON,
	HeroParserErrorMessageToJSON,
	HeroShortFromJSON,
	HeroShortToJSON,
	InternalServerErrorMessageFromJSON,
	InternalServerErrorMessageToJSON,
	LocaleFromJSON,
	LocaleToJSON,
	RoleFromJSON,
	RoleToJSON,
	RoleDetailFromJSON,
	RoleDetailToJSON
} from '../models';

export interface GetHeroHeroesHeroKeyGetRequest {
	heroKey: HeroKey;
	locale?: Locale;
}

export interface ListHeroesHeroesGetRequest {
	role?: Role;
	locale?: Locale;
}

export interface ListRolesRolesGetRequest {
	locale?: Locale;
}

/**
 *
 */
export class HeroesApi extends runtime.BaseAPI {
	/**
	 * Get data about an Overwatch hero : description, abilities, story, etc. <br />**Cache TTL : 1 day.**
	 * Get hero data
	 */
	async getHeroHeroesHeroKeyGetRaw(
		requestParameters: GetHeroHeroesHeroKeyGetRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Hero>> {
		if (requestParameters.heroKey === null || requestParameters.heroKey === undefined) {
			throw new runtime.RequiredError(
				'heroKey',
				'Required parameter requestParameters.heroKey was null or undefined when calling getHeroHeroesHeroKeyGet.'
			);
		}

		const queryParameters: any = {};

		if (requestParameters.locale !== undefined) {
			queryParameters['locale'] = requestParameters.locale;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/heroes/{hero_key}`.replace(`{${'hero_key'}}`, encodeURIComponent(String(requestParameters.heroKey))),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => HeroFromJSON(jsonValue));
	}

	/**
	 * Get data about an Overwatch hero : description, abilities, story, etc. <br />**Cache TTL : 1 day.**
	 * Get hero data
	 */
	async getHeroHeroesHeroKeyGet(
		requestParameters: GetHeroHeroesHeroKeyGetRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Hero> {
		const response = await this.getHeroHeroesHeroKeyGetRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Get a list of Overwatch heroes, which can be filtered using roles. <br />**Cache TTL : 1 day.**
	 * Get a list of heroes
	 */
	async listHeroesHeroesGetRaw(
		requestParameters: ListHeroesHeroesGetRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<HeroShort>>> {
		const queryParameters: any = {};

		if (requestParameters.role !== undefined) {
			queryParameters['role'] = requestParameters.role;
		}

		if (requestParameters.locale !== undefined) {
			queryParameters['locale'] = requestParameters.locale;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/heroes`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HeroShortFromJSON));
	}

	/**
	 * Get a list of Overwatch heroes, which can be filtered using roles. <br />**Cache TTL : 1 day.**
	 * Get a list of heroes
	 */
	async listHeroesHeroesGet(
		requestParameters: ListHeroesHeroesGetRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<HeroShort>> {
		const response = await this.listHeroesHeroesGetRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 * Get a list of available Overwatch roles.<br />**Cache TTL : 1 day.**
	 * Get a list of roles
	 */
	async listRolesRolesGetRaw(
		requestParameters: ListRolesRolesGetRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<runtime.ApiResponse<Array<RoleDetail>>> {
		const queryParameters: any = {};

		if (requestParameters.locale !== undefined) {
			queryParameters['locale'] = requestParameters.locale;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/roles`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters
			},
			initOverrides
		);

		return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleDetailFromJSON));
	}

	/**
	 * Get a list of available Overwatch roles.<br />**Cache TTL : 1 day.**
	 * Get a list of roles
	 */
	async listRolesRolesGet(
		requestParameters: ListRolesRolesGetRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction
	): Promise<Array<RoleDetail>> {
		const response = await this.listRolesRolesGetRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
